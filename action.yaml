name: reflow
description: |
  Action for dispatching workflow runs from public and private repositories.

inputs:
  token:
    description: GitHub token to use (github.token by default)
    required:    false
    type:        string
  call:
    description: Manual workflow to call, e.g. owner/repo/.github/workflows/workflow.yaml@master
    required:    false
    type:        string
  inputs:
    description: Input variables for the workflow dispatch event
    required:    false
    type:        string
  template:
    description: Template string to evaluate as the output
    required:    false
    type:        string
    default:     '{"git": {{ toJson .git }}}'
  values:
    description: YAML-encoded object to pass as {{ .values }} during template evaluation
    required:    false
    type:        string
  interval:
    description: Workflow run's interval of status polling
    required:    true
    type:        string
    default:     30s
  debug_shell:
    description: Whether to debug shell commands
    required:    true
    type:        string
    default:     'false'

outputs:
  template:
    description: Result of evaluating the template
    value:       ${{ steps.template.outputs.result }}

runs:
  using: composite
  steps:
    - name: Set up variables
      id:   var
      run: |
        cat <<EOF
        ::add-mask::${{ inputs.token || github.token }}
        ::set-output name=token::${{ inputs.token || github.token }}
        EOF

        if [[ "${{ inputs.debug_shell }}" == "true" ]]; then
          echo "::set-output name=shell::bash --noprofile --norc -e -o pipefail -x {0}"
        else
          echo "::set-output name=shell::bash --noprofile --norc -e -o pipefail {0}"
        fi
      shell: bash
    - name: Install reflow
      env:
        REFLOW_URL: https://github.com/rjeczalik/reflow/releases/download/v1.4.0/reflow-linux-amd64
      run: |
        do_curl() {
          curl --disable --fail --fail-early --location --connect-timeout 10 --show-error --silent $1
        }

        mkdir -p bin
        do_curl "$REFLOW_URL" > bin/reflow
        chmod +x bin/reflow
      shell: ${{ steps.var.outputs.shell }}
    - name: Write github context file
      id:   context-github
      run: |
        tmp=$(mktemp)

        # cherry-pick important fields from github context
        # do not pass sensitive information like github.token or user info
        cat >$tmp <<EOF
        {
          "sha": "${{ github.sha }}",
          "ref": "${{ github.ref }}",
          "repository": "${{ github.repository }}",
          "event_name": "${{ github.event_name }}",
          "event": ${{ toJson(github.event) }}
        }
        EOF

        cat <<EOF
        ::set-output name=file::$tmp
        EOF
      shell:  ${{ steps.var.outputs.shell }}
    - name: Write values context file
      id:   context-values
      env:
        REFLOW_CONTEXT_GITHUB: ${{ steps.context-github.outputs.file }}
        GITHUB_TOKEN:          ${{ steps.var.outputs.token }}
        PATH:                  ${{ github.workspace }}/bin:${{ env.PATH }}
      run: |
        tmp=$(mktemp)

        cat <<EOF | refmt fmt > $tmp
        ${{ inputs.values }}
        EOF

        cat <<EOF
        ::set-output name=file::$tmp
        EOF
      shell:  ${{ steps.var.outputs.shell }}
    - name: Reflow template
      id:   template
      env:
        REFLOW_CONTEXT_GITHUB: ${{ steps.context-github.outputs.file }}
        REFLOW_CONTEXT_VALUES: ${{ steps.context-values.outputs.file }}
        GITHUB_TOKEN:          ${{ steps.var.outputs.token }}
        PATH:                  ${{ github.workspace }}/bin:${{ env.PATH }}
      run: |
        tmp=$(mktemp)

        cat <<EOF | reflow fmt >> $tmp
        ${{ inputs.template }}
        EOF

        cat <<EOF
        ::set-output name=result::$(cat $tmp)
        EOF

        cat <<EOF | reflow fmt >> $GITHUB_ENV
        {{ .git | toEnvPrefix "REFLOW_GIT_" }}
        EOF
      shell:  ${{ steps.var.outputs.shell }}
    - name: Reflow call workflow
      if:   ${{ inputs.call != '' }}
      env:
        REFLOW_CONTEXT_GITHUB: ${{ steps.context-github.outputs.file }}
        REFLOW_CONTEXT_VALUES: ${{ steps.context-values.outputs.file }}
        GITHUB_TOKEN:          ${{ steps.var.outputs.token }}
        PATH:                  ${{ github.workspace }}/bin:${{ env.PATH }}
      run: |
        cat <<EOF | reflow call --uses "${{ inputs.call }}" --interval "${{ inputs.interval }}"
        ${{ inputs.inputs }}
        EOF
      shell:  ${{ steps.var.outputs.shell }}
    - name: Reflow export environment variables
      if:   ${{ inputs.export_env == 'true' }}
      run: |
        cat <<EOF | reflow fmt --context-github bin/.github.json >> $GITHUB_ENV
        {{ toEnvPrefix "REFLOW_GIT_" .git }}
        EOF
      shell:  ${{ steps.var.outputs.shell }}
    - name: Cleanup
      if: ${{ always() }}
      run: |
        rm -fv bin/reflow bin/.github.json
      shell:  ${{ steps.var.outputs.shell }}
